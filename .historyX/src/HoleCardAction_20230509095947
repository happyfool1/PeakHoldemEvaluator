//package evaluate_streets;

import java.math.BigDecimal;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.io.File;
import java.text.DecimalFormat;

import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.TitledBorder;

/*- ******************************************************************************
 * This class defines a range of hands The hands are in a Container class. 
 * This array represents the commonly used 13 X 13 matrix to represent suited,
 * ofsuit, and pairs
 * An element is true if that card is in the range.
 * 
 * In previkous versions a 13 X 13 array was indexd directly.
 * If the values in the array are assigned in playability order or Expected Value 
 * order then we can simply use that single value and not an array at all.
 * 
 * The purpose of this class ( and the previous HandRange class) is to select an action
 * based or on the hole cards. The action is based on the bet that the player is facing
 * (PREFLOP_LIMP, PREFLOP_OPEN) 
 * The result of this can be expressed in an array that is 
 * This is a new experimental Class derived from the HandRange Class:
 * 		HandRange used a boolean array representing the 169 possible hands.
 * 		This class uses an integers array, not boolean, representing the 169 possible hands.
 * 		The integer values 
 * 
 * The int values are < 0 for hand is not this range and > 0 for hand is in this range.
 * In a future revision I may combine ranges
 * For example:
 * 		1		hand is in this range
 * 		10	Hand is limp		 
 * 		20	Hand is open
 *		21	Hand is open if 1 opponent and we are IP
 *		22	Hand is open if 1 opponent and we are OOP
 * 		30	Hand is call	 	
 * 		40	Hand is bet3	 	
 * 
 * Lots to think about
 * 
 * @author PEAK_
****************************************************************************** */



public class HoleCardAction implements Constants {
}